/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cesds.BookmarkIntervalContent', null, global);
goog.exportSymbol('proto.cesds.BookmarkMeta', null, global);
goog.exportSymbol('proto.cesds.BookmarkMetaList', null, global);
goog.exportSymbol('proto.cesds.BookmarkSetContent', null, global);
goog.exportSymbol('proto.cesds.DoubleList', null, global);
goog.exportSymbol('proto.cesds.IntegerList', null, global);
goog.exportSymbol('proto.cesds.ModelMeta', null, global);
goog.exportSymbol('proto.cesds.ModelMetaList', null, global);
goog.exportSymbol('proto.cesds.OptionalInt32', null, global);
goog.exportSymbol('proto.cesds.OptionalString', null, global);
goog.exportSymbol('proto.cesds.OptionalUInt32', null, global);
goog.exportSymbol('proto.cesds.Record', null, global);
goog.exportSymbol('proto.cesds.RecordData', null, global);
goog.exportSymbol('proto.cesds.RecordList', null, global);
goog.exportSymbol('proto.cesds.RecordTable', null, global);
goog.exportSymbol('proto.cesds.Request', null, global);
goog.exportSymbol('proto.cesds.RequestBookmarkMeta', null, global);
goog.exportSymbol('proto.cesds.RequestModelsMeta', null, global);
goog.exportSymbol('proto.cesds.RequestRecordsData', null, global);
goog.exportSymbol('proto.cesds.RequestSaveBookmark', null, global);
goog.exportSymbol('proto.cesds.Response', null, global);
goog.exportSymbol('proto.cesds.StringList', null, global);
goog.exportSymbol('proto.cesds.Value', null, global);
goog.exportSymbol('proto.cesds.VarMeta', null, global);
goog.exportSymbol('proto.cesds.VarMeta.VariableType', null, global);
goog.exportSymbol('proto.cesds.VarValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.OptionalInt32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.OptionalInt32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.OptionalInt32.displayName = 'proto.cesds.OptionalInt32';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.OptionalInt32.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.OptionalInt32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.OptionalInt32} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.OptionalInt32.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.OptionalInt32}
 */
proto.cesds.OptionalInt32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.OptionalInt32;
  return proto.cesds.OptionalInt32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.OptionalInt32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.OptionalInt32}
 */
proto.cesds.OptionalInt32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.OptionalInt32} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.OptionalInt32.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.OptionalInt32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.OptionalInt32.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.OptionalInt32} The clone.
 */
proto.cesds.OptionalInt32.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.OptionalInt32} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.cesds.OptionalInt32.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.OptionalInt32.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.OptionalUInt32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.OptionalUInt32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.OptionalUInt32.displayName = 'proto.cesds.OptionalUInt32';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.OptionalUInt32.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.OptionalUInt32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.OptionalUInt32} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.OptionalUInt32.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.OptionalUInt32}
 */
proto.cesds.OptionalUInt32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.OptionalUInt32;
  return proto.cesds.OptionalUInt32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.OptionalUInt32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.OptionalUInt32}
 */
proto.cesds.OptionalUInt32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.OptionalUInt32} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.OptionalUInt32.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.OptionalUInt32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.OptionalUInt32.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.OptionalUInt32} The clone.
 */
proto.cesds.OptionalUInt32.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.OptionalUInt32} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.cesds.OptionalUInt32.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.OptionalUInt32.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.OptionalString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.OptionalString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.OptionalString.displayName = 'proto.cesds.OptionalString';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.OptionalString.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.OptionalString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.OptionalString} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.OptionalString.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.OptionalString}
 */
proto.cesds.OptionalString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.OptionalString;
  return proto.cesds.OptionalString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.OptionalString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.OptionalString}
 */
proto.cesds.OptionalString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.OptionalString} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.OptionalString.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.OptionalString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.OptionalString.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.OptionalString} The clone.
 */
proto.cesds.OptionalString.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.OptionalString} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.cesds.OptionalString.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.cesds.OptionalString.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cesds.Value.oneofGroups_);
};
goog.inherits(proto.cesds.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.Value.displayName = 'proto.cesds.Value';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cesds.Value.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.cesds.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  REAL_VALUE: 1,
  INTEGER_VALUE: 2,
  STRING_VALUE: 3
};

/**
 * @return {proto.cesds.Value.ValueCase}
 */
proto.cesds.Value.prototype.getValueCase = function() {
  return /** @type {proto.cesds.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cesds.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.Value} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    realValue: jspb.Message.getOptionalFloatingPointField(msg, 1),
    integerValue: jspb.Message.getField(msg, 2),
    stringValue: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.Value}
 */
proto.cesds.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.Value;
  return proto.cesds.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.Value}
 */
proto.cesds.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRealValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntegerValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.Value} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Value.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Value.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.Value} The clone.
 */
proto.cesds.Value.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.Value} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double real_value = 1;
 * @return {number}
 */
proto.cesds.Value.prototype.getRealValue = function() {
  return /** @type {number} */ (!this.hasRealValue() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.cesds.Value.prototype.setRealValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.cesds.Value.oneofGroups_[0], value);
};


proto.cesds.Value.prototype.clearRealValue = function() {
  jspb.Message.setOneofField(this, 1, proto.cesds.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Value.prototype.hasRealValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 integer_value = 2;
 * @return {number}
 */
proto.cesds.Value.prototype.getIntegerValue = function() {
  return /** @type {number} */ (!this.hasIntegerValue() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.cesds.Value.prototype.setIntegerValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.cesds.Value.oneofGroups_[0], value);
};


proto.cesds.Value.prototype.clearIntegerValue = function() {
  jspb.Message.setOneofField(this, 2, proto.cesds.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Value.prototype.hasIntegerValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string string_value = 3;
 * @return {string}
 */
proto.cesds.Value.prototype.getStringValue = function() {
  return /** @type {string} */ (!this.hasStringValue() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.cesds.Value.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.cesds.Value.oneofGroups_[0], value);
};


proto.cesds.Value.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 3, proto.cesds.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Value.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.DoubleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.DoubleList.repeatedFields_, null);
};
goog.inherits(proto.cesds.DoubleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.DoubleList.displayName = 'proto.cesds.DoubleList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.DoubleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.DoubleList.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.DoubleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.DoubleList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.DoubleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.DoubleList}
 */
proto.cesds.DoubleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.DoubleList;
  return proto.cesds.DoubleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.DoubleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.DoubleList}
 */
proto.cesds.DoubleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.DoubleList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.DoubleList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.DoubleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.DoubleList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.DoubleList} The clone.
 */
proto.cesds.DoubleList.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.DoubleList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated double values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.DoubleList.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {Array.<number>} value  */
proto.cesds.DoubleList.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.cesds.DoubleList.prototype.clearValuesList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.IntegerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.IntegerList.repeatedFields_, null);
};
goog.inherits(proto.cesds.IntegerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.IntegerList.displayName = 'proto.cesds.IntegerList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.IntegerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.IntegerList.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.IntegerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.IntegerList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.IntegerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.IntegerList}
 */
proto.cesds.IntegerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.IntegerList;
  return proto.cesds.IntegerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.IntegerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.IntegerList}
 */
proto.cesds.IntegerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint64());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.IntegerList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.IntegerList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.IntegerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.IntegerList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writePackedSint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.IntegerList} The clone.
 */
proto.cesds.IntegerList.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.IntegerList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated sint64 values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.IntegerList.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.cesds.IntegerList.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.cesds.IntegerList.prototype.clearValuesList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.StringList.repeatedFields_, null);
};
goog.inherits(proto.cesds.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.StringList.displayName = 'proto.cesds.StringList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.StringList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.StringList}
 */
proto.cesds.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.StringList;
  return proto.cesds.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.StringList}
 */
proto.cesds.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getValuesList().push(value);
      msg.setValuesList(msg.getValuesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.StringList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.StringList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.StringList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.StringList} The clone.
 */
proto.cesds.StringList.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.StringList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.cesds.StringList.prototype.getValuesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.cesds.StringList.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.cesds.StringList.prototype.clearValuesList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.BookmarkIntervalContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.BookmarkIntervalContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.BookmarkIntervalContent.displayName = 'proto.cesds.BookmarkIntervalContent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.BookmarkIntervalContent.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.BookmarkIntervalContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.BookmarkIntervalContent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.BookmarkIntervalContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstRecord: msg.getFirstRecord(),
    lastRecord: msg.getLastRecord()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.BookmarkIntervalContent}
 */
proto.cesds.BookmarkIntervalContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.BookmarkIntervalContent;
  return proto.cesds.BookmarkIntervalContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.BookmarkIntervalContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.BookmarkIntervalContent}
 */
proto.cesds.BookmarkIntervalContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstRecord(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.BookmarkIntervalContent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkIntervalContent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.BookmarkIntervalContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkIntervalContent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFirstRecord();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getLastRecord();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.BookmarkIntervalContent} The clone.
 */
proto.cesds.BookmarkIntervalContent.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.BookmarkIntervalContent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 first_record = 2;
 * @return {number}
 */
proto.cesds.BookmarkIntervalContent.prototype.getFirstRecord = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.cesds.BookmarkIntervalContent.prototype.setFirstRecord = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 last_record = 3;
 * @return {number}
 */
proto.cesds.BookmarkIntervalContent.prototype.getLastRecord = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.cesds.BookmarkIntervalContent.prototype.setLastRecord = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.BookmarkSetContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.BookmarkSetContent.repeatedFields_, null);
};
goog.inherits(proto.cesds.BookmarkSetContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.BookmarkSetContent.displayName = 'proto.cesds.BookmarkSetContent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.BookmarkSetContent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.BookmarkSetContent.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.BookmarkSetContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.BookmarkSetContent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.BookmarkSetContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordIdsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.BookmarkSetContent}
 */
proto.cesds.BookmarkSetContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.BookmarkSetContent;
  return proto.cesds.BookmarkSetContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.BookmarkSetContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.BookmarkSetContent}
 */
proto.cesds.BookmarkSetContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setRecordIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.BookmarkSetContent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkSetContent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.BookmarkSetContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkSetContent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRecordIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.BookmarkSetContent} The clone.
 */
proto.cesds.BookmarkSetContent.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.BookmarkSetContent} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated int64 record_ids = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.BookmarkSetContent.prototype.getRecordIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.cesds.BookmarkSetContent.prototype.setRecordIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.cesds.BookmarkSetContent.prototype.clearRecordIdsList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.BookmarkMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cesds.BookmarkMeta.oneofGroups_);
};
goog.inherits(proto.cesds.BookmarkMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.BookmarkMeta.displayName = 'proto.cesds.BookmarkMeta';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cesds.BookmarkMeta.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.cesds.BookmarkMeta.ContentCase = {
  CONTENT_NOT_SET: 0,
  NUM_RECORDS: 3,
  INTERVAL: 4,
  SET: 5
};

/**
 * @return {proto.cesds.BookmarkMeta.ContentCase}
 */
proto.cesds.BookmarkMeta.prototype.getContentCase = function() {
  return /** @type {proto.cesds.BookmarkMeta.ContentCase} */(jspb.Message.computeOneofCase(this, proto.cesds.BookmarkMeta.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.BookmarkMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.BookmarkMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.BookmarkMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.BookmarkMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookmarkId: msg.getBookmarkId(),
    bookmarkName: msg.getBookmarkName(),
    numRecords: jspb.Message.getField(msg, 3),
    interval: (f = msg.getInterval()) && proto.cesds.BookmarkIntervalContent.toObject(includeInstance, f),
    set: (f = msg.getSet()) && proto.cesds.BookmarkSetContent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.BookmarkMeta}
 */
proto.cesds.BookmarkMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.BookmarkMeta;
  return proto.cesds.BookmarkMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.BookmarkMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.BookmarkMeta}
 */
proto.cesds.BookmarkMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBookmarkId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBookmarkName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRecords(value);
      break;
    case 4:
      var value = new proto.cesds.BookmarkIntervalContent;
      reader.readMessage(value,proto.cesds.BookmarkIntervalContent.deserializeBinaryFromReader);
      msg.setInterval(value);
      break;
    case 5:
      var value = new proto.cesds.BookmarkSetContent;
      reader.readMessage(value,proto.cesds.BookmarkSetContent.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.BookmarkMeta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkMeta.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.BookmarkMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkMeta.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBookmarkId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBookmarkName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getInterval();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cesds.BookmarkIntervalContent.serializeBinaryToWriter
    );
  }
  f = this.getSet();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cesds.BookmarkSetContent.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.BookmarkMeta} The clone.
 */
proto.cesds.BookmarkMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.BookmarkMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string bookmark_id = 1;
 * @return {string}
 */
proto.cesds.BookmarkMeta.prototype.getBookmarkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.cesds.BookmarkMeta.prototype.setBookmarkId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string bookmark_name = 2;
 * @return {string}
 */
proto.cesds.BookmarkMeta.prototype.getBookmarkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.cesds.BookmarkMeta.prototype.setBookmarkName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 num_records = 3;
 * @return {number}
 */
proto.cesds.BookmarkMeta.prototype.getNumRecords = function() {
  return /** @type {number} */ (!this.hasNumRecords() ? 0 : jspb.Message.getField(this, 3));
};


/** @param {number?|undefined} value  */
proto.cesds.BookmarkMeta.prototype.setNumRecords = function(value) {
  jspb.Message.setOneofField(this, 3, proto.cesds.BookmarkMeta.oneofGroups_[0], value);
};


proto.cesds.BookmarkMeta.prototype.clearNumRecords = function() {
  jspb.Message.setOneofField(this, 3, proto.cesds.BookmarkMeta.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.BookmarkMeta.prototype.hasNumRecords = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BookmarkIntervalContent interval = 4;
 * @return {proto.cesds.BookmarkIntervalContent}
 */
proto.cesds.BookmarkMeta.prototype.getInterval = function() {
  return /** @type{proto.cesds.BookmarkIntervalContent} */ (
    jspb.Message.getWrapperField(this, proto.cesds.BookmarkIntervalContent, 4));
};


/** @param {proto.cesds.BookmarkIntervalContent|undefined} value  */
proto.cesds.BookmarkMeta.prototype.setInterval = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.cesds.BookmarkMeta.oneofGroups_[0], value);
};


proto.cesds.BookmarkMeta.prototype.clearInterval = function() {
  this.setInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.BookmarkMeta.prototype.hasInterval = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BookmarkSetContent set = 5;
 * @return {proto.cesds.BookmarkSetContent}
 */
proto.cesds.BookmarkMeta.prototype.getSet = function() {
  return /** @type{proto.cesds.BookmarkSetContent} */ (
    jspb.Message.getWrapperField(this, proto.cesds.BookmarkSetContent, 5));
};


/** @param {proto.cesds.BookmarkSetContent|undefined} value  */
proto.cesds.BookmarkMeta.prototype.setSet = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.cesds.BookmarkMeta.oneofGroups_[0], value);
};


proto.cesds.BookmarkMeta.prototype.clearSet = function() {
  this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.BookmarkMeta.prototype.hasSet = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.BookmarkMetaList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.BookmarkMetaList.repeatedFields_, null);
};
goog.inherits(proto.cesds.BookmarkMetaList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.BookmarkMetaList.displayName = 'proto.cesds.BookmarkMetaList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.BookmarkMetaList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.BookmarkMetaList.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.BookmarkMetaList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.BookmarkMetaList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.BookmarkMetaList.toObject = function(includeInstance, msg) {
  var f, obj = {
    bookmarkMetasList: jspb.Message.toObjectList(msg.getBookmarkMetasList(),
    proto.cesds.BookmarkMeta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.BookmarkMetaList}
 */
proto.cesds.BookmarkMetaList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.BookmarkMetaList;
  return proto.cesds.BookmarkMetaList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.BookmarkMetaList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.BookmarkMetaList}
 */
proto.cesds.BookmarkMetaList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cesds.BookmarkMeta;
      reader.readMessage(value,proto.cesds.BookmarkMeta.deserializeBinaryFromReader);
      msg.getBookmarkMetasList().push(value);
      msg.setBookmarkMetasList(msg.getBookmarkMetasList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.BookmarkMetaList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkMetaList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.BookmarkMetaList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.BookmarkMetaList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBookmarkMetasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cesds.BookmarkMeta.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.BookmarkMetaList} The clone.
 */
proto.cesds.BookmarkMetaList.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.BookmarkMetaList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated BookmarkMeta bookmark_metas = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.cesds.BookmarkMeta>}
 */
proto.cesds.BookmarkMetaList.prototype.getBookmarkMetasList = function() {
  return /** @type{!Array.<!proto.cesds.BookmarkMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cesds.BookmarkMeta, 1));
};


/** @param {Array.<!proto.cesds.BookmarkMeta>} value  */
proto.cesds.BookmarkMetaList.prototype.setBookmarkMetasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.cesds.BookmarkMetaList.prototype.clearBookmarkMetasList = function() {
  this.setBookmarkMetasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RequestBookmarkMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.RequestBookmarkMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RequestBookmarkMeta.displayName = 'proto.cesds.RequestBookmarkMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RequestBookmarkMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RequestBookmarkMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RequestBookmarkMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RequestBookmarkMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: msg.getModelId(),
    bookmarkId: (f = msg.getBookmarkId()) && proto.cesds.OptionalString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RequestBookmarkMeta}
 */
proto.cesds.RequestBookmarkMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RequestBookmarkMeta;
  return proto.cesds.RequestBookmarkMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RequestBookmarkMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RequestBookmarkMeta}
 */
proto.cesds.RequestBookmarkMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = new proto.cesds.OptionalString;
      reader.readMessage(value,proto.cesds.OptionalString.deserializeBinaryFromReader);
      msg.setBookmarkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RequestBookmarkMeta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestBookmarkMeta.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RequestBookmarkMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestBookmarkMeta.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBookmarkId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cesds.OptionalString.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RequestBookmarkMeta} The clone.
 */
proto.cesds.RequestBookmarkMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RequestBookmarkMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string model_id = 1;
 * @return {string}
 */
proto.cesds.RequestBookmarkMeta.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.cesds.RequestBookmarkMeta.prototype.setModelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional OptionalString bookmark_id = 2;
 * @return {proto.cesds.OptionalString}
 */
proto.cesds.RequestBookmarkMeta.prototype.getBookmarkId = function() {
  return /** @type{proto.cesds.OptionalString} */ (
    jspb.Message.getWrapperField(this, proto.cesds.OptionalString, 2));
};


/** @param {proto.cesds.OptionalString|undefined} value  */
proto.cesds.RequestBookmarkMeta.prototype.setBookmarkId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cesds.RequestBookmarkMeta.prototype.clearBookmarkId = function() {
  this.setBookmarkId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RequestBookmarkMeta.prototype.hasBookmarkId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RequestSaveBookmark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.RequestSaveBookmark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RequestSaveBookmark.displayName = 'proto.cesds.RequestSaveBookmark';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RequestSaveBookmark.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RequestSaveBookmark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RequestSaveBookmark} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RequestSaveBookmark.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: msg.getModelId(),
    newBookmark: (f = msg.getNewBookmark()) && proto.cesds.BookmarkMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RequestSaveBookmark}
 */
proto.cesds.RequestSaveBookmark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RequestSaveBookmark;
  return proto.cesds.RequestSaveBookmark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RequestSaveBookmark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RequestSaveBookmark}
 */
proto.cesds.RequestSaveBookmark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = new proto.cesds.BookmarkMeta;
      reader.readMessage(value,proto.cesds.BookmarkMeta.deserializeBinaryFromReader);
      msg.setNewBookmark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RequestSaveBookmark} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestSaveBookmark.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RequestSaveBookmark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestSaveBookmark.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getNewBookmark();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cesds.BookmarkMeta.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RequestSaveBookmark} The clone.
 */
proto.cesds.RequestSaveBookmark.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RequestSaveBookmark} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string model_id = 1;
 * @return {string}
 */
proto.cesds.RequestSaveBookmark.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.cesds.RequestSaveBookmark.prototype.setModelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BookmarkMeta new_bookmark = 2;
 * @return {proto.cesds.BookmarkMeta}
 */
proto.cesds.RequestSaveBookmark.prototype.getNewBookmark = function() {
  return /** @type{proto.cesds.BookmarkMeta} */ (
    jspb.Message.getWrapperField(this, proto.cesds.BookmarkMeta, 2));
};


/** @param {proto.cesds.BookmarkMeta|undefined} value  */
proto.cesds.RequestSaveBookmark.prototype.setNewBookmark = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cesds.RequestSaveBookmark.prototype.clearNewBookmark = function() {
  this.setNewBookmark(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RequestSaveBookmark.prototype.hasNewBookmark = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.VarMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.VarMeta.repeatedFields_, null);
};
goog.inherits(proto.cesds.VarMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.VarMeta.displayName = 'proto.cesds.VarMeta';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.VarMeta.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.VarMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.VarMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.VarMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.VarMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    varId: msg.getVarId(),
    varName: msg.getVarName(),
    isInput: msg.getIsInput(),
    units: msg.getUnits(),
    siList: jspb.Message.getField(msg, 5),
    scale: msg.getScale(),
    type: msg.getType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.VarMeta}
 */
proto.cesds.VarMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.VarMeta;
  return proto.cesds.VarMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.VarMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.VarMeta}
 */
proto.cesds.VarMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVarId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVarName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInput(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnits(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setSiList(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScale(value);
      break;
    case 7:
      var value = /** @type {!proto.cesds.VarMeta.VariableType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.VarMeta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.VarMeta.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.VarMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.VarMeta.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVarId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getVarName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getIsInput();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getUnits();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSiList();
  if (f.length > 0) {
    writer.writePackedSint32(
      5,
      f
    );
  }
  f = this.getScale();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.VarMeta} The clone.
 */
proto.cesds.VarMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.VarMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 var_id = 1;
 * @return {number}
 */
proto.cesds.VarMeta.prototype.getVarId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.VarMeta.prototype.setVarId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string var_name = 2;
 * @return {string}
 */
proto.cesds.VarMeta.prototype.getVarName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.cesds.VarMeta.prototype.setVarName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool is_input = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.cesds.VarMeta.prototype.getIsInput = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.cesds.VarMeta.prototype.setIsInput = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string units = 4;
 * @return {string}
 */
proto.cesds.VarMeta.prototype.getUnits = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.cesds.VarMeta.prototype.setUnits = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated sint32 si = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.VarMeta.prototype.getSiList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<number>} value  */
proto.cesds.VarMeta.prototype.setSiList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.cesds.VarMeta.prototype.clearSiList = function() {
  jspb.Message.setField(this, 5, []);
};


/**
 * optional double scale = 6;
 * @return {number}
 */
proto.cesds.VarMeta.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.cesds.VarMeta.prototype.setScale = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional VariableType type = 7;
 * @return {!proto.cesds.VarMeta.VariableType}
 */
proto.cesds.VarMeta.prototype.getType = function() {
  return /** @type {!proto.cesds.VarMeta.VariableType} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.cesds.VarMeta.VariableType} value  */
proto.cesds.VarMeta.prototype.setType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.cesds.VarMeta.VariableType = {
  REAL: 0,
  INTEGER: 1,
  STRING: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.ModelMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.ModelMeta.repeatedFields_, null);
};
goog.inherits(proto.cesds.ModelMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.ModelMeta.displayName = 'proto.cesds.ModelMeta';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.ModelMeta.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.ModelMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.ModelMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.ModelMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.ModelMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: msg.getModelId(),
    modelName: msg.getModelName(),
    modelUri: msg.getModelUri(),
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.cesds.VarMeta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.ModelMeta}
 */
proto.cesds.ModelMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.ModelMeta;
  return proto.cesds.ModelMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.ModelMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.ModelMeta}
 */
proto.cesds.ModelMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelUri(value);
      break;
    case 4:
      var value = new proto.cesds.VarMeta;
      reader.readMessage(value,proto.cesds.VarMeta.deserializeBinaryFromReader);
      msg.getVariablesList().push(value);
      msg.setVariablesList(msg.getVariablesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.ModelMeta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.ModelMeta.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.ModelMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.ModelMeta.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getModelName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getModelUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.cesds.VarMeta.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.ModelMeta} The clone.
 */
proto.cesds.ModelMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.ModelMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string model_id = 1;
 * @return {string}
 */
proto.cesds.ModelMeta.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.cesds.ModelMeta.prototype.setModelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string model_name = 2;
 * @return {string}
 */
proto.cesds.ModelMeta.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.cesds.ModelMeta.prototype.setModelName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string model_uri = 3;
 * @return {string}
 */
proto.cesds.ModelMeta.prototype.getModelUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.cesds.ModelMeta.prototype.setModelUri = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated VarMeta variables = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.cesds.VarMeta>}
 */
proto.cesds.ModelMeta.prototype.getVariablesList = function() {
  return /** @type{!Array.<!proto.cesds.VarMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cesds.VarMeta, 4));
};


/** @param {Array.<!proto.cesds.VarMeta>} value  */
proto.cesds.ModelMeta.prototype.setVariablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.cesds.ModelMeta.prototype.clearVariablesList = function() {
  this.setVariablesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.ModelMetaList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.ModelMetaList.repeatedFields_, null);
};
goog.inherits(proto.cesds.ModelMetaList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.ModelMetaList.displayName = 'proto.cesds.ModelMetaList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.ModelMetaList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.ModelMetaList.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.ModelMetaList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.ModelMetaList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.ModelMetaList.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelsList: jspb.Message.toObjectList(msg.getModelsList(),
    proto.cesds.ModelMeta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.ModelMetaList}
 */
proto.cesds.ModelMetaList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.ModelMetaList;
  return proto.cesds.ModelMetaList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.ModelMetaList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.ModelMetaList}
 */
proto.cesds.ModelMetaList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cesds.ModelMeta;
      reader.readMessage(value,proto.cesds.ModelMeta.deserializeBinaryFromReader);
      msg.getModelsList().push(value);
      msg.setModelsList(msg.getModelsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.ModelMetaList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.ModelMetaList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.ModelMetaList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.ModelMetaList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cesds.ModelMeta.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.ModelMetaList} The clone.
 */
proto.cesds.ModelMetaList.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.ModelMetaList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ModelMeta models = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.cesds.ModelMeta>}
 */
proto.cesds.ModelMetaList.prototype.getModelsList = function() {
  return /** @type{!Array.<!proto.cesds.ModelMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cesds.ModelMeta, 1));
};


/** @param {Array.<!proto.cesds.ModelMeta>} value  */
proto.cesds.ModelMetaList.prototype.setModelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.cesds.ModelMetaList.prototype.clearModelsList = function() {
  this.setModelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.VarValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.VarValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.VarValue.displayName = 'proto.cesds.VarValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.VarValue.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.VarValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.VarValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.VarValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    varId: msg.getVarId(),
    value: (f = msg.getValue()) && proto.cesds.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.VarValue}
 */
proto.cesds.VarValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.VarValue;
  return proto.cesds.VarValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.VarValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.VarValue}
 */
proto.cesds.VarValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVarId(value);
      break;
    case 2:
      var value = new proto.cesds.Value;
      reader.readMessage(value,proto.cesds.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.VarValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.VarValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.VarValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.VarValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVarId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cesds.Value.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.VarValue} The clone.
 */
proto.cesds.VarValue.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.VarValue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 var_id = 1;
 * @return {number}
 */
proto.cesds.VarValue.prototype.getVarId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.VarValue.prototype.setVarId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {proto.cesds.Value}
 */
proto.cesds.VarValue.prototype.getValue = function() {
  return /** @type{proto.cesds.Value} */ (
    jspb.Message.getWrapperField(this, proto.cesds.Value, 2));
};


/** @param {proto.cesds.Value|undefined} value  */
proto.cesds.VarValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cesds.VarValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.VarValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.Record.repeatedFields_, null);
};
goog.inherits(proto.cesds.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.Record.displayName = 'proto.cesds.Record';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.Record.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.Record} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordId: msg.getRecordId(),
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.cesds.VarValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.Record}
 */
proto.cesds.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.Record;
  return proto.cesds.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.Record}
 */
proto.cesds.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecordId(value);
      break;
    case 2:
      var value = new proto.cesds.VarValue;
      reader.readMessage(value,proto.cesds.VarValue.deserializeBinaryFromReader);
      msg.getVariablesList().push(value);
      msg.setVariablesList(msg.getVariablesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.Record} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Record.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Record.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRecordId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cesds.VarValue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.Record} The clone.
 */
proto.cesds.Record.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.Record} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 record_id = 1;
 * @return {number}
 */
proto.cesds.Record.prototype.getRecordId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.Record.prototype.setRecordId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated VarValue variables = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.cesds.VarValue>}
 */
proto.cesds.Record.prototype.getVariablesList = function() {
  return /** @type{!Array.<!proto.cesds.VarValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cesds.VarValue, 2));
};


/** @param {Array.<!proto.cesds.VarValue>} value  */
proto.cesds.Record.prototype.setVariablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.cesds.Record.prototype.clearVariablesList = function() {
  this.setVariablesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RecordList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.RecordList.repeatedFields_, null);
};
goog.inherits(proto.cesds.RecordList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RecordList.displayName = 'proto.cesds.RecordList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.RecordList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RecordList.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RecordList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RecordList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RecordList.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.cesds.Record.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RecordList}
 */
proto.cesds.RecordList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RecordList;
  return proto.cesds.RecordList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RecordList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RecordList}
 */
proto.cesds.RecordList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cesds.Record;
      reader.readMessage(value,proto.cesds.Record.deserializeBinaryFromReader);
      msg.getRecordsList().push(value);
      msg.setRecordsList(msg.getRecordsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RecordList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RecordList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RecordList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RecordList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cesds.Record.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RecordList} The clone.
 */
proto.cesds.RecordList.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RecordList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Record records = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.cesds.Record>}
 */
proto.cesds.RecordList.prototype.getRecordsList = function() {
  return /** @type{!Array.<!proto.cesds.Record>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cesds.Record, 1));
};


/** @param {Array.<!proto.cesds.Record>} value  */
proto.cesds.RecordList.prototype.setRecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.cesds.RecordList.prototype.clearRecordsList = function() {
  this.setRecordsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RecordTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.RecordTable.repeatedFields_, proto.cesds.RecordTable.oneofGroups_);
};
goog.inherits(proto.cesds.RecordTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RecordTable.displayName = 'proto.cesds.RecordTable';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.RecordTable.repeatedFields_ = [1,2];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cesds.RecordTable.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.cesds.RecordTable.ListCase = {
  LIST_NOT_SET: 0,
  REALS: 3,
  INTEGERS: 4,
  STRINGS: 5
};

/**
 * @return {proto.cesds.RecordTable.ListCase}
 */
proto.cesds.RecordTable.prototype.getListCase = function() {
  return /** @type {proto.cesds.RecordTable.ListCase} */(jspb.Message.computeOneofCase(this, proto.cesds.RecordTable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RecordTable.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RecordTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RecordTable} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RecordTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    varIdsList: jspb.Message.getField(msg, 1),
    recIdsList: jspb.Message.getField(msg, 2),
    reals: (f = msg.getReals()) && proto.cesds.DoubleList.toObject(includeInstance, f),
    integers: (f = msg.getIntegers()) && proto.cesds.IntegerList.toObject(includeInstance, f),
    strings: (f = msg.getStrings()) && proto.cesds.StringList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RecordTable}
 */
proto.cesds.RecordTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RecordTable;
  return proto.cesds.RecordTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RecordTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RecordTable}
 */
proto.cesds.RecordTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setVarIdsList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setRecIdsList(value);
      break;
    case 3:
      var value = new proto.cesds.DoubleList;
      reader.readMessage(value,proto.cesds.DoubleList.deserializeBinaryFromReader);
      msg.setReals(value);
      break;
    case 4:
      var value = new proto.cesds.IntegerList;
      reader.readMessage(value,proto.cesds.IntegerList.deserializeBinaryFromReader);
      msg.setIntegers(value);
      break;
    case 5:
      var value = new proto.cesds.StringList;
      reader.readMessage(value,proto.cesds.StringList.deserializeBinaryFromReader);
      msg.setStrings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RecordTable} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RecordTable.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RecordTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RecordTable.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVarIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = this.getRecIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = this.getReals();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cesds.DoubleList.serializeBinaryToWriter
    );
  }
  f = this.getIntegers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cesds.IntegerList.serializeBinaryToWriter
    );
  }
  f = this.getStrings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cesds.StringList.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RecordTable} The clone.
 */
proto.cesds.RecordTable.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RecordTable} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated int32 var_ids = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.RecordTable.prototype.getVarIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.cesds.RecordTable.prototype.setVarIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.cesds.RecordTable.prototype.clearVarIdsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated int64 rec_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.RecordTable.prototype.getRecIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<number>} value  */
proto.cesds.RecordTable.prototype.setRecIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.cesds.RecordTable.prototype.clearRecIdsList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional DoubleList reals = 3;
 * @return {proto.cesds.DoubleList}
 */
proto.cesds.RecordTable.prototype.getReals = function() {
  return /** @type{proto.cesds.DoubleList} */ (
    jspb.Message.getWrapperField(this, proto.cesds.DoubleList, 3));
};


/** @param {proto.cesds.DoubleList|undefined} value  */
proto.cesds.RecordTable.prototype.setReals = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.cesds.RecordTable.oneofGroups_[0], value);
};


proto.cesds.RecordTable.prototype.clearReals = function() {
  this.setReals(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RecordTable.prototype.hasReals = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IntegerList integers = 4;
 * @return {proto.cesds.IntegerList}
 */
proto.cesds.RecordTable.prototype.getIntegers = function() {
  return /** @type{proto.cesds.IntegerList} */ (
    jspb.Message.getWrapperField(this, proto.cesds.IntegerList, 4));
};


/** @param {proto.cesds.IntegerList|undefined} value  */
proto.cesds.RecordTable.prototype.setIntegers = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.cesds.RecordTable.oneofGroups_[0], value);
};


proto.cesds.RecordTable.prototype.clearIntegers = function() {
  this.setIntegers(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RecordTable.prototype.hasIntegers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringList strings = 5;
 * @return {proto.cesds.StringList}
 */
proto.cesds.RecordTable.prototype.getStrings = function() {
  return /** @type{proto.cesds.StringList} */ (
    jspb.Message.getWrapperField(this, proto.cesds.StringList, 5));
};


/** @param {proto.cesds.StringList|undefined} value  */
proto.cesds.RecordTable.prototype.setStrings = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.cesds.RecordTable.oneofGroups_[0], value);
};


proto.cesds.RecordTable.prototype.clearStrings = function() {
  this.setStrings(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RecordTable.prototype.hasStrings = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RecordData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cesds.RecordData.oneofGroups_);
};
goog.inherits(proto.cesds.RecordData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RecordData.displayName = 'proto.cesds.RecordData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cesds.RecordData.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cesds.RecordData.StyleCase = {
  STYLE_NOT_SET: 0,
  LIST: 1,
  TABLE: 2
};

/**
 * @return {proto.cesds.RecordData.StyleCase}
 */
proto.cesds.RecordData.prototype.getStyleCase = function() {
  return /** @type {proto.cesds.RecordData.StyleCase} */(jspb.Message.computeOneofCase(this, proto.cesds.RecordData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RecordData.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RecordData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RecordData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RecordData.toObject = function(includeInstance, msg) {
  var f, obj = {
    list: (f = msg.getList()) && proto.cesds.RecordList.toObject(includeInstance, f),
    table: (f = msg.getTable()) && proto.cesds.RecordTable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RecordData}
 */
proto.cesds.RecordData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RecordData;
  return proto.cesds.RecordData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RecordData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RecordData}
 */
proto.cesds.RecordData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cesds.RecordList;
      reader.readMessage(value,proto.cesds.RecordList.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 2:
      var value = new proto.cesds.RecordTable;
      reader.readMessage(value,proto.cesds.RecordTable.deserializeBinaryFromReader);
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RecordData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RecordData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RecordData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RecordData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getList();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cesds.RecordList.serializeBinaryToWriter
    );
  }
  f = this.getTable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cesds.RecordTable.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RecordData} The clone.
 */
proto.cesds.RecordData.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RecordData} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional RecordList list = 1;
 * @return {proto.cesds.RecordList}
 */
proto.cesds.RecordData.prototype.getList = function() {
  return /** @type{proto.cesds.RecordList} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RecordList, 1));
};


/** @param {proto.cesds.RecordList|undefined} value  */
proto.cesds.RecordData.prototype.setList = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.cesds.RecordData.oneofGroups_[0], value);
};


proto.cesds.RecordData.prototype.clearList = function() {
  this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RecordData.prototype.hasList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RecordTable table = 2;
 * @return {proto.cesds.RecordTable}
 */
proto.cesds.RecordData.prototype.getTable = function() {
  return /** @type{proto.cesds.RecordTable} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RecordTable, 2));
};


/** @param {proto.cesds.RecordTable|undefined} value  */
proto.cesds.RecordData.prototype.setTable = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.cesds.RecordData.oneofGroups_[0], value);
};


proto.cesds.RecordData.prototype.clearTable = function() {
  this.setTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RecordData.prototype.hasTable = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cesds.Response.oneofGroups_);
};
goog.inherits(proto.cesds.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.Response.displayName = 'proto.cesds.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cesds.Response.oneofGroups_ = [[5,6,7,8]];

/**
 * @enum {number}
 */
proto.cesds.Response.TypeCase = {
  TYPE_NOT_SET: 0,
  ERROR: 5,
  MODELS: 6,
  DATA: 7,
  BOOKMARKS: 8
};

/**
 * @return {proto.cesds.Response.TypeCase}
 */
proto.cesds.Response.prototype.getTypeCase = function() {
  return /** @type {proto.cesds.Response.TypeCase} */(jspb.Message.computeOneofCase(this, proto.cesds.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: msg.getVersion(),
    id: (f = msg.getId()) && proto.cesds.OptionalUInt32.toObject(includeInstance, f),
    chunkId: msg.getChunkId(),
    nextChunkId: msg.getNextChunkId(),
    error: jspb.Message.getField(msg, 5),
    models: (f = msg.getModels()) && proto.cesds.ModelMetaList.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.cesds.RecordData.toObject(includeInstance, f),
    bookmarks: (f = msg.getBookmarks()) && proto.cesds.BookmarkMetaList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.Response}
 */
proto.cesds.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.Response;
  return proto.cesds.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.Response}
 */
proto.cesds.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.cesds.OptionalUInt32;
      reader.readMessage(value,proto.cesds.OptionalUInt32.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNextChunkId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 6:
      var value = new proto.cesds.ModelMetaList;
      reader.readMessage(value,proto.cesds.ModelMetaList.deserializeBinaryFromReader);
      msg.setModels(value);
      break;
    case 7:
      var value = new proto.cesds.RecordData;
      reader.readMessage(value,proto.cesds.RecordData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 8:
      var value = new proto.cesds.BookmarkMetaList;
      reader.readMessage(value,proto.cesds.BookmarkMetaList.deserializeBinaryFromReader);
      msg.setBookmarks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cesds.OptionalUInt32.serializeBinaryToWriter
    );
  }
  f = this.getChunkId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getNextChunkId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getModels();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cesds.ModelMetaList.serializeBinaryToWriter
    );
  }
  f = this.getData();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cesds.RecordData.serializeBinaryToWriter
    );
  }
  f = this.getBookmarks();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.cesds.BookmarkMetaList.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.Response} The clone.
 */
proto.cesds.Response.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.Response} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.cesds.Response.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.Response.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional OptionalUInt32 id = 2;
 * @return {proto.cesds.OptionalUInt32}
 */
proto.cesds.Response.prototype.getId = function() {
  return /** @type{proto.cesds.OptionalUInt32} */ (
    jspb.Message.getWrapperField(this, proto.cesds.OptionalUInt32, 2));
};


/** @param {proto.cesds.OptionalUInt32|undefined} value  */
proto.cesds.Response.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cesds.Response.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Response.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 chunk_id = 3;
 * @return {number}
 */
proto.cesds.Response.prototype.getChunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.cesds.Response.prototype.setChunkId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 next_chunk_id = 4;
 * @return {number}
 */
proto.cesds.Response.prototype.getNextChunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.cesds.Response.prototype.setNextChunkId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string error = 5;
 * @return {string}
 */
proto.cesds.Response.prototype.getError = function() {
  return /** @type {string} */ (!this.hasError() ? "" : jspb.Message.getField(this, 5));
};


/** @param {string?|undefined} value  */
proto.cesds.Response.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 5, proto.cesds.Response.oneofGroups_[0], value);
};


proto.cesds.Response.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 5, proto.cesds.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ModelMetaList models = 6;
 * @return {proto.cesds.ModelMetaList}
 */
proto.cesds.Response.prototype.getModels = function() {
  return /** @type{proto.cesds.ModelMetaList} */ (
    jspb.Message.getWrapperField(this, proto.cesds.ModelMetaList, 6));
};


/** @param {proto.cesds.ModelMetaList|undefined} value  */
proto.cesds.Response.prototype.setModels = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.cesds.Response.oneofGroups_[0], value);
};


proto.cesds.Response.prototype.clearModels = function() {
  this.setModels(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Response.prototype.hasModels = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RecordData data = 7;
 * @return {proto.cesds.RecordData}
 */
proto.cesds.Response.prototype.getData = function() {
  return /** @type{proto.cesds.RecordData} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RecordData, 7));
};


/** @param {proto.cesds.RecordData|undefined} value  */
proto.cesds.Response.prototype.setData = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.cesds.Response.oneofGroups_[0], value);
};


proto.cesds.Response.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Response.prototype.hasData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BookmarkMetaList bookmarks = 8;
 * @return {proto.cesds.BookmarkMetaList}
 */
proto.cesds.Response.prototype.getBookmarks = function() {
  return /** @type{proto.cesds.BookmarkMetaList} */ (
    jspb.Message.getWrapperField(this, proto.cesds.BookmarkMetaList, 8));
};


/** @param {proto.cesds.BookmarkMetaList|undefined} value  */
proto.cesds.Response.prototype.setBookmarks = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.cesds.Response.oneofGroups_[0], value);
};


proto.cesds.Response.prototype.clearBookmarks = function() {
  this.setBookmarks(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Response.prototype.hasBookmarks = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RequestModelsMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cesds.RequestModelsMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RequestModelsMeta.displayName = 'proto.cesds.RequestModelsMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RequestModelsMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RequestModelsMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RequestModelsMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RequestModelsMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: (f = msg.getModelId()) && proto.cesds.OptionalString.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RequestModelsMeta}
 */
proto.cesds.RequestModelsMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RequestModelsMeta;
  return proto.cesds.RequestModelsMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RequestModelsMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RequestModelsMeta}
 */
proto.cesds.RequestModelsMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cesds.OptionalString;
      reader.readMessage(value,proto.cesds.OptionalString.deserializeBinaryFromReader);
      msg.setModelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RequestModelsMeta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestModelsMeta.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RequestModelsMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestModelsMeta.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cesds.OptionalString.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RequestModelsMeta} The clone.
 */
proto.cesds.RequestModelsMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RequestModelsMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional OptionalString model_id = 1;
 * @return {proto.cesds.OptionalString}
 */
proto.cesds.RequestModelsMeta.prototype.getModelId = function() {
  return /** @type{proto.cesds.OptionalString} */ (
    jspb.Message.getWrapperField(this, proto.cesds.OptionalString, 1));
};


/** @param {proto.cesds.OptionalString|undefined} value  */
proto.cesds.RequestModelsMeta.prototype.setModelId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.cesds.RequestModelsMeta.prototype.clearModelId = function() {
  this.setModelId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.RequestModelsMeta.prototype.hasModelId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.RequestRecordsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cesds.RequestRecordsData.repeatedFields_, null);
};
goog.inherits(proto.cesds.RequestRecordsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.RequestRecordsData.displayName = 'proto.cesds.RequestRecordsData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cesds.RequestRecordsData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.RequestRecordsData.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.RequestRecordsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.RequestRecordsData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.RequestRecordsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: msg.getModelId(),
    maxRecords: msg.getMaxRecords(),
    varIdsList: jspb.Message.getField(msg, 3),
    bookmarkId: msg.getBookmarkId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.RequestRecordsData}
 */
proto.cesds.RequestRecordsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.RequestRecordsData;
  return proto.cesds.RequestRecordsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.RequestRecordsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.RequestRecordsData}
 */
proto.cesds.RequestRecordsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxRecords(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setVarIdsList(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBookmarkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.RequestRecordsData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestRecordsData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.RequestRecordsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.RequestRecordsData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMaxRecords();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getVarIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = this.getBookmarkId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.RequestRecordsData} The clone.
 */
proto.cesds.RequestRecordsData.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.RequestRecordsData} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string model_id = 1;
 * @return {string}
 */
proto.cesds.RequestRecordsData.prototype.getModelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.cesds.RequestRecordsData.prototype.setModelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 max_records = 2;
 * @return {number}
 */
proto.cesds.RequestRecordsData.prototype.getMaxRecords = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.cesds.RequestRecordsData.prototype.setMaxRecords = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated int32 var_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.cesds.RequestRecordsData.prototype.getVarIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<number>} value  */
proto.cesds.RequestRecordsData.prototype.setVarIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.cesds.RequestRecordsData.prototype.clearVarIdsList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional string bookmark_id = 4;
 * @return {string}
 */
proto.cesds.RequestRecordsData.prototype.getBookmarkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.cesds.RequestRecordsData.prototype.setBookmarkId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cesds.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cesds.Request.oneofGroups_);
};
goog.inherits(proto.cesds.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cesds.Request.displayName = 'proto.cesds.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cesds.Request.oneofGroups_ = [[3,4,5,6]];

/**
 * @enum {number}
 */
proto.cesds.Request.TypeCase = {
  TYPE_NOT_SET: 0,
  MODELS_METADATA: 3,
  RECORDS_DATA: 4,
  BOOKMARK_META: 5,
  SAVE_BOOKMARK: 6
};

/**
 * @return {proto.cesds.Request.TypeCase}
 */
proto.cesds.Request.prototype.getTypeCase = function() {
  return /** @type {proto.cesds.Request.TypeCase} */(jspb.Message.computeOneofCase(this, proto.cesds.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cesds.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.cesds.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cesds.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cesds.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: msg.getVersion(),
    id: (f = msg.getId()) && proto.cesds.OptionalUInt32.toObject(includeInstance, f),
    modelsMetadata: (f = msg.getModelsMetadata()) && proto.cesds.RequestModelsMeta.toObject(includeInstance, f),
    recordsData: (f = msg.getRecordsData()) && proto.cesds.RequestRecordsData.toObject(includeInstance, f),
    bookmarkMeta: (f = msg.getBookmarkMeta()) && proto.cesds.RequestBookmarkMeta.toObject(includeInstance, f),
    saveBookmark: (f = msg.getSaveBookmark()) && proto.cesds.RequestSaveBookmark.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cesds.Request}
 */
proto.cesds.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cesds.Request;
  return proto.cesds.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cesds.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cesds.Request}
 */
proto.cesds.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.cesds.OptionalUInt32;
      reader.readMessage(value,proto.cesds.OptionalUInt32.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = new proto.cesds.RequestModelsMeta;
      reader.readMessage(value,proto.cesds.RequestModelsMeta.deserializeBinaryFromReader);
      msg.setModelsMetadata(value);
      break;
    case 4:
      var value = new proto.cesds.RequestRecordsData;
      reader.readMessage(value,proto.cesds.RequestRecordsData.deserializeBinaryFromReader);
      msg.setRecordsData(value);
      break;
    case 5:
      var value = new proto.cesds.RequestBookmarkMeta;
      reader.readMessage(value,proto.cesds.RequestBookmarkMeta.deserializeBinaryFromReader);
      msg.setBookmarkMeta(value);
      break;
    case 6:
      var value = new proto.cesds.RequestSaveBookmark;
      reader.readMessage(value,proto.cesds.RequestSaveBookmark.deserializeBinaryFromReader);
      msg.setSaveBookmark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cesds.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cesds.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cesds.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cesds.OptionalUInt32.serializeBinaryToWriter
    );
  }
  f = this.getModelsMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cesds.RequestModelsMeta.serializeBinaryToWriter
    );
  }
  f = this.getRecordsData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cesds.RequestRecordsData.serializeBinaryToWriter
    );
  }
  f = this.getBookmarkMeta();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cesds.RequestBookmarkMeta.serializeBinaryToWriter
    );
  }
  f = this.getSaveBookmark();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cesds.RequestSaveBookmark.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cesds.Request} The clone.
 */
proto.cesds.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.cesds.Request} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.cesds.Request.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.cesds.Request.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional OptionalUInt32 id = 2;
 * @return {proto.cesds.OptionalUInt32}
 */
proto.cesds.Request.prototype.getId = function() {
  return /** @type{proto.cesds.OptionalUInt32} */ (
    jspb.Message.getWrapperField(this, proto.cesds.OptionalUInt32, 2));
};


/** @param {proto.cesds.OptionalUInt32|undefined} value  */
proto.cesds.Request.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.cesds.Request.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Request.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestModelsMeta models_metadata = 3;
 * @return {proto.cesds.RequestModelsMeta}
 */
proto.cesds.Request.prototype.getModelsMetadata = function() {
  return /** @type{proto.cesds.RequestModelsMeta} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RequestModelsMeta, 3));
};


/** @param {proto.cesds.RequestModelsMeta|undefined} value  */
proto.cesds.Request.prototype.setModelsMetadata = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.cesds.Request.oneofGroups_[0], value);
};


proto.cesds.Request.prototype.clearModelsMetadata = function() {
  this.setModelsMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Request.prototype.hasModelsMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestRecordsData records_data = 4;
 * @return {proto.cesds.RequestRecordsData}
 */
proto.cesds.Request.prototype.getRecordsData = function() {
  return /** @type{proto.cesds.RequestRecordsData} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RequestRecordsData, 4));
};


/** @param {proto.cesds.RequestRecordsData|undefined} value  */
proto.cesds.Request.prototype.setRecordsData = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.cesds.Request.oneofGroups_[0], value);
};


proto.cesds.Request.prototype.clearRecordsData = function() {
  this.setRecordsData(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Request.prototype.hasRecordsData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestBookmarkMeta bookmark_meta = 5;
 * @return {proto.cesds.RequestBookmarkMeta}
 */
proto.cesds.Request.prototype.getBookmarkMeta = function() {
  return /** @type{proto.cesds.RequestBookmarkMeta} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RequestBookmarkMeta, 5));
};


/** @param {proto.cesds.RequestBookmarkMeta|undefined} value  */
proto.cesds.Request.prototype.setBookmarkMeta = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.cesds.Request.oneofGroups_[0], value);
};


proto.cesds.Request.prototype.clearBookmarkMeta = function() {
  this.setBookmarkMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Request.prototype.hasBookmarkMeta = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestSaveBookmark save_bookmark = 6;
 * @return {proto.cesds.RequestSaveBookmark}
 */
proto.cesds.Request.prototype.getSaveBookmark = function() {
  return /** @type{proto.cesds.RequestSaveBookmark} */ (
    jspb.Message.getWrapperField(this, proto.cesds.RequestSaveBookmark, 6));
};


/** @param {proto.cesds.RequestSaveBookmark|undefined} value  */
proto.cesds.Request.prototype.setSaveBookmark = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.cesds.Request.oneofGroups_[0], value);
};


proto.cesds.Request.prototype.clearSaveBookmark = function() {
  this.setSaveBookmark(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.cesds.Request.prototype.hasSaveBookmark = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.cesds);
